<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_run_right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables
health              = 100;
image_speed         = 2;
isDead              = false;
grav                = 1;
spd                 = 4;
jspd                = 12;
hspd                = 0;
vspd                = 0;
jumping             = false;
jump_force          = -300;
invincibility       = false;
attacking           = false;
invcTime            = 30; //in frames
attackingTime       = 15; //in frames
deathAnimTimer      = 60; //in frames
hspd_carry          = 0; //platform move speed
dir                 = 1;
melee_damage        = 50;
range_damage        = 25;
jump_damage         = 25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//game over screen
game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Weapon Alarm
attacking = false;
with(obj_sword_1) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Invincibility Alarm
invincibility = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Platform Physics
// I would recommend watching the tutorial video to better
// understand this code. The link to the video is at the bottom
// of this code.

var rkey = keyboard_check(vk_right);
var lkey = keyboard_check(vk_left);
var jkey = keyboard_check_pressed(vk_up);
var resetKey = keyboard_check_pressed(vk_f1);
var spaceKey = keyboard_check_pressed(vk_space);
var fkey = keyboard_check_pressed(ord('F'));
var onGround = place_meeting(x, y+1, obj_solid);

if(isDead) {
    if(image_index &gt;= 3) {
        image_speed = 0;
    }
    if(!onGround) {
        while (!place_meeting(x, y+sign(vspd), obj_solid)) {
            y+= 1;
        }
    }
    
    return 0;
}

// Check for the ground
if (onGround) {
    vspd = 0;
    
    if(hspd == 0)
    {
        sprite_index = spr_player_idle;
        image_index = 0;
    }
    else
    {
        if(sprite_index != spr_player_run_right &amp;&amp; hspd &gt; 0)
        {
            sprite_index = spr_player_run_right;
            image_index = 0;
            image_speed = 1;
            dir = 1;
        }
        if(sprite_index != spr_player_run_left &amp;&amp; hspd &lt; 0)
        {
            sprite_index = spr_player_run_left;
            image_index = 0;
            image_speed = 1;
            dir = -1;
        }
    }
    
    //First jump
    if (jkey) {   
        jumping = true; 
        vspd = -jspd;
        sprite_index = spr_player_jump_right;
        image_index = 0;
        image_speed = .25;
        show_debug_message("First Jump");
    }
    
    hspd = 0; //reset hspeed here
}
//Second jump - check needs to go first
else if(jumping == true &amp;&amp; !onGround &amp;&amp; jkey) {
    vspd = -jspd;
    sprite_index = spr_player_jump_right;
    image_index = 0;
    image_speed = .25;
    show_debug_message("Second Jump");
    jumping = false;
}
// Gravity
else {
    if (vspd &lt; 10) {
        vspd += grav;
    }
}

// Moving right
if (rkey) {
    hspd = spd;
}

// Moving left
if (lkey) {
    hspd = -spd;
}

//shoot bullet
if (spaceKey) {
    instance_create(x,y,obj_bullet);
}

if (fkey &amp;&amp; !attacking) {
    attacking = true;
    alarm[1] = attackingTime;
    instance_create(x,y,obj_sword_1);
}

// Check for not moving
if ((!rkey &amp;&amp; !lkey &amp;&amp; !invincibility) || (rkey &amp;&amp; lkey)) {
    hspd = 0;
    if(!jumping) {
        sprite_index = spr_player_idle;
    }
}

var hspd_final = hspd + hspd_carry;
hspd_carry = 0;

// Horizontal collisions
if (place_meeting(x + hspd_final, y, obj_solid)) {
    while (!place_meeting(x+sign(hspd_final), y, obj_solid)) {
        x+= sign(hspd_final);
    }
    hspd_final = 0;
    hspd = 0;
}

// Vertical collisions
if (place_meeting(x, y+vspd, obj_solid)) {
    while (!place_meeting(x, y+sign(vspd), obj_solid)) {
        y+= sign(vspd);
    }
    vspd = 0;
}

// Move horizontally
x += hspd_final;
// Move vertically
y += vspd;

/*if(x &gt; room_width) {
    room_goto_next();
    //transition_kind = 6;
    //transition_steps = 160;
}
else if (x &lt;= 0 &amp;&amp; room != room1) {
    room_goto_previous();
    x = room_width - 30;
    //transition_kind = 7;
    //transition_steps = 160;
}
else if (x &lt;= 0 &amp;&amp; room == room1) {
    x = 0;
}*/

if (health &lt;= 0 &amp;&amp; !isDead) {
    isDead = true;
    sprite_index = spr_player_death;
    image_index = 0;
    image_speed = .25;
    alarm[2] = deathAnimTimer;
}

//if reset key is pressed or check for out of bounds and reset game
if( resetKey || y &gt; room_height) {
   game_restart();
}

// Video link: https://www.youtube.com/watch?v=ZFX7IHhZw7g&amp;feature=gp-n-y&amp;google_comment_id=z13mcnqybsvzvvs2x234hjvokzbrj3a0k
// You are free to use this file and code in any way you want. You may even create a game using it and sell it.
// Any credit you give to me would be very welcome.
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
